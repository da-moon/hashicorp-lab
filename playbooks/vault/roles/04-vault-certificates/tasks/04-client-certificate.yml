---

- stat:
    path: "{{ certificate_root_dir }}/vault/{{ inventory_hostname }}/client.pem.enc"
  register: "client_pem_enc"
- stat:
    path: "{{ certificate_root_dir }}/vault/{{ inventory_hostname }}/client-key.pem.enc"
  register: "client_key_pem_enc"
- stat:
    path: "{{ certificate_root_dir }}/vault/{{ inventory_hostname }}/client.csr.enc"
  register: "client_csr_enc"    
- block:
  - name : "removing leftover vault client 'client.pem.enc'"
    file: 
      path: "{{ certificate_root_dir }}/vault/{{ inventory_hostname }}/client.pem.enc"
      state: absent
    when:
      - client_pem_enc.stat.exists
  - name : "removing leftover vault client 'client-key.pem.enc'"
    file: 
      path: "{{ certificate_root_dir }}/vault/{{ inventory_hostname }}/client-key.pem.enc"
      state: absent
    when:
      - client_key_pem_enc.stat.exists
  - name : "removing leftover vault client 'client.csr.enc'"
    file: 
      path: "{{ certificate_root_dir }}/vault/{{ inventory_hostname }}/client.csr.enc"
      state: absent
    when:
      - client_csr_enc.stat.exists
  - name: "Generating vault client certificates for '{{ inventory_hostname }}'"
    shell: "echo '{}' | sudo cfssl gencert -ca={{ certificate_root_dir }}/vault/{{ inventory_hostname }}/ca.pem -ca-key={{ certificate_root_dir }}/vault/{{ inventory_hostname }}/ca-key.pem -config={{ cfssl_config_path }} -hostname='client.global.vault,{{ inventory_hostname }},{{ private_ip }},localhost,127.0.0.1' - | cfssljson -bare client"
    args:
      chdir: "{{ certificate_root_dir }}/vault/{{ inventory_hostname }}"
  when: >
    ca_pem_enc.stat.exists == False or
    ca_key_pem_enc.stat.exists == False or
    ca_csr_enc.stat.exists == False
